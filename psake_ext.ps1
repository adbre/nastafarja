function Get-NormalizedVersion
{
param(
    [string]$versionString = $(throw "versionString is required")
)

  $version = New-Object -type System.Version $versionString
  $version = New-Object -type System.Version `
    $(if ($version.Major -gt 0) { $version.Major } else { 0 }),`
    $(if ($version.Minor -gt 0) { $version.Minor } else { 0 }),`
    $(if ($version.Build -gt 0) { $version.Build } else { 0 }),`
    $(if ($version.Revision -gt 0) { $version.Revision } else { 0 })
  return $version.ToString()
}

function Replace-VersionComponent
{
param(
    [string]$Component,
    [string]$VersionString,
    [int]$Replacement
)

    $version = New-Object -type System.Version $versionString
    $major = $version.Major
    $minor = $version.Minor
    $build = $version.Build
    $revision=$version.Revision
    if ($Component -eq "Major") {
        $major = $Replacement
    } elseif ($Component -eq "Minor") {
        $minor = $Replacement
    } elseif ($Component -eq "Build") {
        $build = $Replacement
    }elseif ($Component -eq "Revision") {
        $revision = $Replacement
    }

    $version = New-Object -type System.Version $major,$minor,$build,$revision
    return $version.ToString()
}

function Get-TeamCityBuildNumber {
    return (Get-Int32OrDefault "$env:BUILD_NUMBER")
}

function Get-BambooBuildNumber {
    return (Get-Int32OrDefault "$env:bamboo_BuildNumber")
}

function Get-BuildNumberFromCISystem {
    $buildNumber = Get-TeamCityBuildNumber
    if ($buildNumber -gt 0) { return $buildNumber }
    
    $buildNumber = Get-BambooBuildNumber
    if ($buildNumber -gt 0) { return $buildNumber }

    return 0
}

function Get-Int32OrDefault($s) {
    [int]$result = $null
    $ignored = [System.Int32]::TryParse($s, [ref]$result)
    return $result # if we failed, $result will be 0
}

function Get-GitDescribe
{
    return (git describe --always) 2>$null
}

function Get-GitBranch
{
    try {
        return ((git symbolic-ref HEAD 2>$null).Replace("refs/heads/", ""))
    } catch {
        return $null
    }
}

function Get-GitCommit
{
    return (git log --pretty=format:%h -1) 2>$null
}

function Get-VersionFromGitTag
{
  try {
    $gitTag = (git describe --tags --abbrev=0 2>$null)
  } catch {
    $gitTag = $null
  }

  if ($gitTag -and $gitTag.StartsWith("v")) {
    $versionString = $gitTag.Substring(1)
  } elseif ($gitTag) {
    $versionString = $gitTag
  } else {
    $versionString = "0.0.0"
  }

  return $versionString
}

function Get-InformationalVersion
{
param(
    [string]$Version
)

    $GitDescribe = Get-GitDescribe
    $GitBranch = Get-GitBranch
    if ($GitBranch -ne $null) {
        $GitBranch = "-$GitBranch"
    }

    $UserName = [System.Environment]::UserName
    $MachineName = [System.Environment]::MachineName
    return [System.String]::Format("{0} {1} {2:o} {3}@{4}", $Version, $GitDescribe, $(get-date), $UserName, $MachineName, $GitBranch)
}

function Generate-AssemblyInfo
{
param(
    [string]$title,
    [string]$description,
    [string]$company,
    [string]$product,
    [string]$copyright,
    [string]$version,
    [string]$informationalVersion,
    [string]$file = $(throw "file is a required parameter.")
)

  $asmInfo = "/*
 * This file was generated by psake_ext.ps1 on $((get-date).ToString('o'))
 *
 * Any modifications to this file will be overwritten by build tools when updating version numbers.
 *
 * If you need to add additional assembly attributes, add another .cs file to your project and
 * add the attributes in that file, AssemblyInfo.Static.cs for example.
 */
using System;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

[assembly: ComVisibleAttribute(false)]
[assembly: AssemblyTitleAttribute(""$title"")]
[assembly: AssemblyDescriptionAttribute(""$description"")]
[assembly: AssemblyCompanyAttribute(""$company"")]
[assembly: AssemblyProductAttribute(""$product"")]
[assembly: AssemblyCopyrightAttribute(""$copyright"")]
[assembly: AssemblyVersionAttribute(""$version"")]
#if !PocketPC
[assembly: AssemblyFileVersionAttribute(""$version"")]
#endif
[assembly: AssemblyInformationalVersionAttribute(""$informationalVersion"")]
[assembly: AssemblyDelaySignAttribute(false)]
"

    $dir = [System.IO.Path]::GetDirectoryName($file)
    if ([System.IO.Directory]::Exists($dir) -eq $false)
    {
        Write-Host "Creating directory $dir"
        [System.IO.Directory]::CreateDirectory($dir)
    }

    Write-Host "Generating assembly info file: $file"
    $Utf8WithoutByteOrderMark = New-Object System.Text.UTF8Encoding($false)
    [System.IO.File]::WriteAllLines($file, $asmInfo, $Utf8WithoutByteOrderMark)
}
